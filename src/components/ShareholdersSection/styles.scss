@import "../../shared-styles/variables";

$scene-height: 550px;

// We need the section to impose its black background on the whole width.
.ShareholdersSection {
  height: 100vh;
  background-color: #000;
  width: 100%;
}

// We need a centerer object that adds padding, but if the content is
// absolutely positionned as a direct child, it won't respect the padding.
.ShareholdersSection .Padder {
  max-width: $content-width;
  padding: $padding;
  margin: 0 auto;

  // Use flexbox to center vertically (not super important)
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

// So we relatively position a children of the padding element, so that the
// children respect the margin/padding box for their positioning.
.ShareholdersSection .ShareholdersScene {
  position: relative;
  // With position: absolute children, it seems there's no way to make the
  // children dictate the size of the parents, so we can hardcode a minimum
  // one here
  min-height: $scene-height;

  // Since the parent center this div, bring it back up a little bit.
  transform: translateY(-$center-upper);
}

.Stickman {
  position: absolute;
  top: 337px;

  margin: 0 auto;
  left: 0;
  right: 0;
}

.Truth {
  position: absolute;
  right: 0px;
  top: 478px;
  width: 100%;
  text-align: center;
  font-family: $font-family-typewriter;
  font-size: $font-size-small;
  color: white;
}

.TheShareholder {
  position: absolute;
  top: 0px;
  // Center the element without transform for GSAP
  margin: 0 auto;
  left: 0;
  right: 0;

  // max-width: 80%;
  // max-height: 100%;
}

.Table {
  position: absolute;
  top: 457px;
  left: 0px;
  width: 100%;
  // Calculate the table height in the scene to really hide the evil.
  // + take into account the centering offset of the scene
  // + account for scene centering
  // + 1px for some reason, probably rounding
  height: calc(
    #{$scene-height} - 457px + #{$center-upper} + (100vh - #{$scene-height}) / 2 +
      1px
  );
  background-color: black;
  border-top: white solid 2px;
}

// .TableBottom {
//   position: relative;
//   bottom: -$padding;
//   // top: $padding;
//   left: 0px;
//   // top: 457px;
//   // left: 0px;
//   width: 100%;
//   height: 25%;
//   // height: calc(100vh - 457px);
//   background-color: blue;
//   // border-top: white solid 2px;
// }

.Creations {
  position: absolute;
  top: 462px;
  left: 50%;
  transform-origin: top left;
  /* vertically compress it to give perspective */
  transform: translateX(-50%) scaleY(0.5);
  width: 199px;
}
