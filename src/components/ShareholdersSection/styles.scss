@import "../../shared-styles/variables";

// We need the section to impose its black background on the whole width.
.ShareholdersSection {
  height: 100vh;
  background-color: black;
  width: 100%;
}

// We need a centerer object that adds padding, but if the content is
// absolutely positionned as a direct child, it won't respect the padding.
.ShareholdersSection .Padder {
  max-width: $content-width;
  padding: $padding;
  margin: 0 auto;

  // Use flexbox to center vertically (not super important)
  height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

// So we relatively position a children of the padding element, so that the
// children respect the margin/padding box for their positioning.
.ShareholdersSection .ShareholdersScene {
  position: relative;
  // With position: absolute children, it seems there's no way to make the
  // children dictate the size of the parents, so we can hardcode a minimum
  // one here
  min-height: 400px;

  // Since the parent center this div, bring it back up a little bit.
  transform: translateY(-8vh);
}

.Stickman {
  position: absolute;
  left: 0px;
  top: 181px;
}

.ViewLine {
  position: absolute;
  left: 19px;
  right: 135px;
  top: 191px;
  height: 10px;
  overflow: hidden;
  // border: 1px dashed #df2323;
}

.ViewLine svg {
  position: absolute;
  top: 0px;
  left: 0px;
}

.Target {
  position: absolute;
  width: 225.86px;
  height: 225.86px;
  right: 21px;
  top: 80px;
}

.TargetText {
  position: absolute;
  width: 226px;
  right: 21px;
  top: 329px;
  overflow: visible;
}

.Truth {
  position: absolute;
  left: 100px;
  top: 138px;
  max-width: 52%;
  font-family: $font-family-typewriter;
  font-size: $font-size-small;
  color: white;
}

// Lower the text on small screen
@media (max-width: 700px) {
  .Truth {
    top: 400px;
    left: 0px;
  }
}
