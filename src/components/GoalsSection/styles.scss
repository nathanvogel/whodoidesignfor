@import "../../shared-styles/variables";

// We need the section to impose its black background on the whole width.
.GoalsSection {
  height: 100vh;
  background-color: black;
  width: 100%;
}

// We need a centerer object that adds padding, but if the content is
// absolutely positionned as a direct child, it won't respect the padding.
.GoalsSection .Padder {
  max-width: $content-width;
  padding: $padding;
  margin: 0 auto;
}

// So we relatively position a children of the padding element, so that the
// children respect the margin/padding box for their positioning.
.GoalsSection .GoalsScene {
  position: relative;
  // With position: absolute children, it seems there's no way to make the
  // children dictate the size of the parents, so we can hardcode a minimum
  // one here
  min-height: 500px;
}

.GoalsSection .TopGradient {
  // A smoother gradient than the default one with no easing.
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0) 0%,
    rgba(0, 0, 0, 0.008) 13%,
    rgba(0, 0, 0, 0.024) 20%,
    rgba(0, 0, 0, 0.051) 27%,
    rgba(0, 0, 0, 0.086) 33%,
    rgba(0, 0, 0, 0.181) 44%,
    rgba(0, 0, 0, 0.302) 55%,
    rgba(0, 0, 0, 0.404) 62%,
    rgba(0, 0, 0, 0.737) 82%,
    rgba(0, 0, 0, 0.878) 91%,
    rgba(0, 0, 0, 1) 100%
  );
  position: absolute;
  bottom: 100%;
  left: 0px;
  width: 100%;
  height: 40%;
}

.Stickman {
  position: absolute;
  left: 0px;
  top: 339px;
}

.ViewLine {
  position: absolute;
  left: 21px;
  right: 170px;
  top: 349px;
}

.Target {
  position: absolute;
  width: 225.86px;
  height: 225.86px;
  left: 619px;
  top: 236.14px;
}

.Quarter {
  position: absolute;
  left: calc(50% - 387px / 2 - 116.5px);
  top: 54px;
}

.Truth {
  position: absolute;
  left: calc(50% - 390px / 2 - 115px);
  top: 364px;
}
